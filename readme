Projeto desenvolvido em React.js
Node.js v18.17.0
npm v9.6.7

API
Desenvolvida JavaScript utilizando Express e Sequelize.

Interface
Desenvolvida em React.js e TypeScript

Instalação
Rodar o comando 'npm install' para instalação das dependências nas pastas "API" e "Interface" e 'npm start' tanto na interface quanto na API para rodar as aplicações.

Observações:

- Quanto a linguagem escolhida na API:
Escolhi JavaScript ao invés de TypeScript porque tinha mais segurança na linguagem. O que eu sei de TypeScript precisa ser refrescado, portanto pensei que não conseguiria entregar dentro do prazo se fosse o caso. Dito isso decidi utilizar JavaScript e entregar algo que eu tinha confiança que ia funcionar e não ia perder tempo em coisas que seriam básicas de TypeScript.

- Quanto a problemas com a ORM:
Tentei minimizar ao máximo as consultas ao banco de dados. Sendo assim, ao acionar o botão verificar serão feitas duas consultas. Isso se deve a que, apesar de haver pesquisado bastante a respeito e analisado o código da cabeça aos pés, não consegui resolver um problema de associação de tabelas com a ORM e estava ficando sem tempo, então decidi deixar duas consultas mesmo.

- quanto a problemas no front-end:
Falta aplicar a função de validação antes da atualização

- Quanto a observações da proposta:
Vocês pediram uma interface que mostrasse os packs com seus respectivos preços e que ao mudar o preço do pack fosse possível mudar os preços dos produtos através da interface, sendo que isso só é possível se os itens dos packs são os mesmos. Para casos onde o pack tem 2 itens diferentes, reajustar o preço dos itens apenas mudando o valor do pack é simplesmente impossível, a API não tem como adivinhar e atribuir por conta própria qual é o novo preço dos produtos e se isso é possível (coisa que não tenho certeza) é com muito cálculo matemático. O jeito seria que a interface que mostra o pack no front-end tenha campos mostrando quais produtos fazem parte do pack, quais os preços desses produtos e que esses campos sejam todos customizáveis e enviáveis para validações no back-end e posteriormente alteração no banco de dados, mas isso vai contra o conceito de alterações massivas no banco proposto no arquivo de teste técnico, já que o usuário teria que editar na mão os preços pois o arquivo CSV só entrega código do produto e novo valor. E mesmo que entregasse todos os campos teriam que ser arquivos CSV com colunas diferentes e haveria necessidade de que seja implementada uma nova rota exclusiva para atualização massiva de packs.